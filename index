import { useState } from "react";
import { Input } from "@/components/ui/input";
import { Card, CardContent } from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { Slider } from "@/components/ui/slider";
import { Button } from "@/components/ui/button";

export default function SaaSCostEstimator() {
  const [users, setUsers] = useState(100);
  const [pricePerUser, setPricePerUser] = useState(15);
  const [fixedCosts, setFixedCosts] = useState([
    { label: "Base DB Cost", value: 500 },
  ]);
  const [semiLinearCosts, setSemiLinearCosts] = useState([
    { label: "RDS Cost", value: 100 },
    { label: "Logs Cost", value: 50 },
  ]);
  const [scalableCosts, setScalableCosts] = useState([
    { label: "ECS Cost", value: 600 },
    { label: "Network Cost", value: 30 },
  ]);

  const handleCostChange = (type, index, key, newValue) => {
    const costList = type === "fixed" ? fixedCosts : type === "semi" ? semiLinearCosts : scalableCosts;
    const updated = [...costList];
    updated[index][key] = key === "value" ? parseFloat(newValue) : newValue;
    if (type === "fixed") setFixedCosts(updated);
    else if (type === "semi") setSemiLinearCosts(updated);
    else setScalableCosts(updated);
  };

  const addCostField = (type) => {
    const newCost = { label: "New Cost", value: 0 };
    if (type === "fixed") setFixedCosts([...fixedCosts, newCost]);
    else if (type === "semi") setSemiLinearCosts([...semiLinearCosts, newCost]);
    else setScalableCosts([...scalableCosts, newCost]);
  };

  const removeCostField = (type, index) => {
    const costList = type === "fixed" ? [...fixedCosts] : type === "semi" ? [...semiLinearCosts] : [...scalableCosts];
    costList.splice(index, 1);
    if (type === "fixed") setFixedCosts(costList);
    else if (type === "semi") setSemiLinearCosts(costList);
    else setScalableCosts(costList);
  };

  const calculateCost = (usuarios) => {
    const fixedTotal = fixedCosts.reduce((acc, item) => acc + item.value, 0);
    const semiLinearTotal = semiLinearCosts.reduce((acc, item) => acc + item.value * Math.ceil(usuarios / 5000), 0);
    const scalableTotal = scalableCosts.reduce((acc, item) => acc + item.value * Math.ceil(usuarios / 1000), 0);
    return fixedTotal + semiLinearTotal + scalableTotal;
  };

  const exportCSV = () => {
    const rows = [
      ["Tipo", "Nome do Custo", "Valor (R$)"]
    ];
    fixedCosts.forEach(cost => rows.push(["Fixo", cost.label, cost.value]));
    semiLinearCosts.forEach(cost => rows.push(["Semi-linear (por 5000)", cost.label, cost.value]));
    scalableCosts.forEach(cost => rows.push(["Escalonado (por 1000)", cost.label, cost.value]));
    rows.push([], ["Usuários", users]);
    rows.push(["Preço por Usuário", pricePerUser]);
    rows.push(["Receita Total (R$)", users * pricePerUser]);
    rows.push(["Custo Total (R$)", calculateCost(users)]);
    rows.push(["Lucro Estimado (R$)", (users * pricePerUser - calculateCost(users))]);

    const csvContent = rows.map(e => e.join(",")).join("\n");
    const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.setAttribute("href", url);
    link.setAttribute("download", "simulacao_saas.csv");
    link.click();
  };

  const totalCost = calculateCost(users);
  const totalRevenue = users * pricePerUser;
  const estimatedProfit = totalRevenue - totalCost;

  const renderCostFields = (type, costs) => (
    <div className="space-y-2">
      {costs.map((cost, index) => (
        <div key={index} className="flex gap-2 items-center">
          <Input
            type="text"
            value={cost.label}
            onChange={(e) => handleCostChange(type, index, "label", e.target.value)}
            className="w-1/2"
          />
          <Input
            type="number"
            value={cost.value}
            onChange={(e) => handleCostChange(type, index, "value", e.target.value)}
            className="w-1/3"
          />
          <Button style={{ backgroundColor: '#1e3a8a', color: 'white' }} onClick={() => removeCostField(type, index)}>Remover</Button>
        </div>
      ))}
      <Button onClick={() => addCostField(type)}>Adicionar novo custo</Button>
    </div>
  );

  return (
    <div className="p-6 max-w-xl mx-auto space-y-6">
      <h1 className="text-2xl font-bold text-center">SaaS Infra Cost Estimator</h1>

      <p className="text-sm text-muted-foreground text-center">
        Preencha os custos atuais da sua infraestrutura conforme a categoria:
        <br />
        <strong>Custos Fixos</strong>: não variam com o número de usuários (ex: banco, domínio)<br />
        <strong>Custos Semi-lineares</strong>: aumentam em blocos, como a cada 5.000 usuários<br />
        <strong>Custos Escalonados</strong>: aumentam a cada 1.000 usuários (ex: servidores, tráfego)<br />
        Depois, defina o número de usuários e o preço por usuário para estimar receita, custo e lucro.
      </p>

      <Card>
        <CardContent className="space-y-4 pt-6">
          <div>
            <Label htmlFor="users">Número de Usuários</Label>
            <Input
              type="number"
              id="users"
              value={users}
              onChange={(e) => setUsers(parseInt(e.target.value))}
              min={100}
              step={100}
            />
            <Slider
              min={100}
              max={50000}
              step={100}
              value={[users]}
              onValueChange={(val) => setUsers(val[0])}
            />
          </div>

          <div>
            <Label htmlFor="price">Preço por Usuário (R$)</Label>
            <Input
              type="number"
              id="price"
              value={pricePerUser}
              onChange={(e) => setPricePerUser(parseFloat(e.target.value))}
            />
          </div>

          <div>
            <Label>Custos Fixos</Label>
            {renderCostFields("fixed", fixedCosts)}
          </div>

          <div>
            <Label>Custos Semi-lineares (crescem a cada 5.000 usuários)</Label>
            {renderCostFields("semi", semiLinearCosts)}
          </div>

          <div>
            <Label>Custos Escalonados (crescem a cada 1.000 usuários)</Label>
            {renderCostFields("scalable", scalableCosts)}
          </div>

          <div>
            <Label>Custo Estimado Total (R$)</Label>
            <p className="text-xl font-semibold">R$ {totalCost.toLocaleString()}</p>
          </div>

          <div>
            <Label>Receita Total (R$)</Label>
            <p className="text-lg">R$ {totalRevenue.toLocaleString()}</p>
          </div>

          <div>
            <Label>Lucro Estimado (R$)</Label>
            <p className="text-lg font-bold text-green-600">R$ {estimatedProfit.toLocaleString()}</p>
          </div>

          <Button onClick={exportCSV}>Exportar Simulação</Button>
        </CardContent>
      </Card>
    </div>
  );
}
